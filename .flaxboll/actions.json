{"1748626318397":{"actionType":"saveAll","createdAt":"1748626318397","actionID":"1748626318397","userID":"#TEMP","path":"system.capsules.f550c7f4-e8ec-42c1-b9b8-dc96a17ba9c0.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: green; background-color: black; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const css3 =\n  'color: yellow; background-color: red; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css4 =\n  'color: yellow; background-color: darkred; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops_setVar = { args: any; pass: { keyPath: string[]; value: any } };\n\nexport const setVar = (props: Tprops_setVar) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  let { keyPath, value } = pass;\n  console.log({ value });\n\n  // ---------- join String\n  const url = keyPath.reduce((prev, curr) => prev + curr, '');\n  console.log({ url });\n\n  const typeValue = testArgsVars(value);\n\n  // -------------------------------\n  // ------------- IF is FREE VALUE\n  // -------------------------------\n  if (typeValue === 'free') {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value[0]);\n\n    return setData({ path: url, value: value[0] });\n  }\n\n  // -----------------------------------\n  // ------------ IF is ARG or VAR VALUE\n  // -----------------------------------\n  value = getCondValue(typeValue, value, args);\n  // value = updatedValue;\n\n  // --------- DEPURAR ERRO\n  if (value === undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css3);\n    console.log('%csetVar path', css4, url);\n    console.log('%csetVar type', css4, typeValue);\n    console.log('%csetVar value', css4, 'o valor de value é ' + value);\n  }\n\n  // --------- DEPURAR OK\n  if (value !== undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value);\n\n    return setData({ path: url, value: value });\n  }\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgsVars = (value: string[]) => {\n  let typeValue: 'free' | 'var' | 'arg' = 'free';\n  const typeOfVal = typeof value;\n\n  if (typeOfVal === 'string') {\n    const joinedChild = value.join();\n    if (joinedChild.includes('$var_')) typeValue = 'var';\n    if (joinedChild.includes('$arg_')) typeValue = 'arg';\n  }\n\n  return typeValue;\n};\n\nconst getCondValue = (typeValue, value, args) => {\n  let updatedValue = undefined;\n  console.log({ value });\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  // --------------------------\n  // ------- Tratamento de ARGs\n  // --------------------------\n  if (typeValue === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    // ---- Para Callback Functions\n    // ---- Ex. onChangeText do TextInput\n    const condInput = key === 'callback';\n    if (condInput) {\n      updatedValue = args[0];\n    }\n\n    // ---- Para Listas\n    // ---- Passa todo objeto 'item'\n    const condFull = key === 'full';\n    if (condFull) {\n      updatedValue = findFlatItem(args);\n    }\n\n    // ---- Para Listas\n    // ---- Seleciona um campo dentro de 'item'\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      updatedValue = foundItem[key];\n    }\n\n    if (updatedValue === undefined) console.log('ARG ERROR', { updatedValue });\n  }\n\n  // --------------------------\n  // ------- Tratamento de VARs\n  // --------------------------\n  if (typeValue === 'var') {\n    console.log({ joinedChild });\n    const [condVar, varValue] = getVarValue(joinedChild, 'noComponent');\n    if (condVar) updatedValue = varValue;\n    if (!condVar) console.log('VAR ERROR', { updatedValue });\n  }\n\n  return updatedValue;\n};","newValue":"Muad'Dib\nmuadibatreides\nAusente\n\nCarlos Alberto — 26/05/2025 12:22\nvc nao vai pegar de variavel\nvai pegar de argumento da lista\nMuad'Dib — 26/05/2025 12:22\nesse n é na lista\nCarlos Alberto — 26/05/2025 12:22\nsim\nMuad'Dib — 26/05/2025 12:22\nn to falando do placar n\npega igual pega da lista?\ncom arg?\nCarlos Alberto — 26/05/2025 12:23\na vc ta falando dos totais ne\nMuad'Dib — 26/05/2025 12:23\nisso\nCarlos Alberto — 26/05/2025 12:23\na blz\ndai é com var mesmo\nonde esta?\nMuad'Dib — 26/05/2025 12:25\npreview box\nImagem\nCarlos Alberto — 26/05/2025 12:27\né o previewbox?\nMuad'Dib — 26/05/2025 12:30\nisso\ndentro dele coloquei um texto e tava funcionando\ncoloquei outro pra ler var e n aparece a view\nCarlos Alberto — 26/05/2025 12:34\nacho que deu problema ao colocar duas strings dentro de um unico Text\nisso eu vou ter que arrumar\nentão coloca cada um num texto\nalias\neu ja coloquei\nMuad'Dib — 26/05/2025 12:35\ndeu certo?\nCarlos Alberto — 26/05/2025 12:35\nImagem\nMuad'Dib — 26/05/2025 12:35\nvou recarregar pra ver\nCarlos Alberto — 26/05/2025 12:35\ncoloca os outros\nMuad'Dib — 26/05/2025 12:35\nblz\nCarlos Alberto — 26/05/2025 12:45\neu vou almoçar\neu ajustei os logos dos times\nMuad'Dib — 26/05/2025 12:45\nblz, até agora td dando certo\nCarlos Alberto — 26/05/2025 12:47\nlegal\ndaí 2h30 agente entra\npra testar\ne definir o rumo da live\nMuad'Dib — 26/05/2025 12:48\nblz\nMuad'Dib — 26/05/2025 13:32\ndeixei o botão de testes com opacidade 0, mas tá lá no mesmo lugar se precisar\nagora indo pro almoço, 14:30 to de volta\nMuad'Dib — 26/05/2025 14:30\nde volta\nCarlos Alberto — 26/05/2025 14:39\nOpa\nbora la\nCarlos Alberto — 26/05/2025 15:16\nTítulo: Bolão da Final da Champions League com Firebase Firestore: Guia Completo!\nPrepare-se para a final da Champions League e eleve a sua experiência com um bolão personalizado, construído utilizando o poder do Firebase Firestore! Neste vídeo, vamos guiá-lo passo a passo na criação de um bolão interativo e dinâmico, desde a configuração inicial do Firebase até a implementação das funcionalidades essenciais para seus participantes darem seus palpites e acompanharem a classificação em tempo real.\n\nNão se esqueça de:\n\nDeixar seu like no vídeo.,\nSe inscrever no canal para mais tutoriais e dicas.,\nCompartilhar o vídeo com seus amigos que também são fãs de futebol.,\nDeixar um comentário com suas dúvidas e sugestões.,\n#Firebase#Firestore#ChampionsLeague#Bolão#Futebol#DesenvolvimentoWeb#JavaScript#Tutorial#Programação#FinalChampions#GoogleCloud#Database#RealtimeDatabase#WebDev#Coding#Campeões#Apostasonline#Palpites#BolaoOnline#Futbol#UEFAChampionsLeague\ncaiu ai?\nMuad'Dib — 26/05/2025 15:25\no microfone n tá funcionando, tá pegando só do notebook\nCarlos Alberto — 26/05/2025 15:42\nBora criar um app para o bolão da final PSG x Inter usando o firebase? Aqui vamos ter contador de placar, nome do user e ranking dos palpites!\nMuad'Dib — 26/05/2025 16:34\n@Leandro @Carlos Alberto apareceu ja nas recomendações pra mim\nhttps://www.youtube.com/watch?v=UF49EouUuVc\nYouTube\nFlaxboll Brasil\nBolão da Final da Champions League com Firebase Firestore: Guia Co...\nImagem\nLeandro — 26/05/2025 16:35\nlegal\nCarlos Alberto — 26/05/2025 16:35\nlegal\né bom dar umas curtidas tb\nMuad'Dib — 26/05/2025 16:36\nfazer uns fakes e deixar uns comentários hehe\nah sim, no momento o youtube tá usando comentários pra difusão, curtida e visualizações tão abaixo nas prioridades\nlembrar de sempre pedir por povo comentar, tentar levantar alguma pergunta\nCarlos Alberto — 26/05/2025 16:39\nlegal\nCarlos Alberto — 11:39\nImagem\nMuad'Dib — 11:41\n@Carlos Alberto \n\ncoloca pra Morfos por favor, assim n precisa exportar capsulas depois\nImagem\nCarlos Alberto — 11:47\nFaz ai como usuário Fernandes mesmo\nagente vai fazer no mesmo esquema do ultimo video\nvai usar o mesmo projeto na live\nMuad'Dib — 11:47\nblz\nCarlos Alberto — 11:48\neu vou criar o custom pra colocar no botão e calcular\nCarlos Alberto — 12:00\nO Juan deu ideia mas eu vou ter q entender como fazer esse calculo\nnão sei se vou conseguir fazer a tempo mas vou tentar\nse eu nao conseguir vamos pro plano B pra LIVE segunda\nmas de qq forma deixa os formularios prontos q vai ser usado\nMuad'Dib — 12:00\nblz\nMuad'Dib — 12:23\ntem aí as variáveis especificas pra usar ou crio aqui? pros inputs\nCarlos Alberto — 12:38\nvc ja colocou?\nse sim me passa\nMuad'Dib — 12:38\nainda não, to fazendo os outros campos\ndeixei variavel pra depois\nCarlos Alberto — 12:39\nEu usei assim aqui\n\nall.forms.form1.rendTrib\nall.forms.form1.desMed\nall.forms.form1.edu\nall.forms.form1.prev\nall.forms.form1.irRet\nall.forms.form1.dep\nMuad'Dib — 12:39\nblz\nvou seguir esses\nMuad'Dib — 13:06\ntá dando um problema com os inputs\nQuando digito em um sai nos outros tbm, embora a setVar pareça estar funcionando certinho\nImagem\nCarlos Alberto — 13:33\nprecisa colocar o path\nno TextInput\nnao to falando do setVar\nesse\nImagem\nFernandes.. cria tb uma variavel com esse valor por favor:\n\nconst tabelaIR = [\n  { faixa: 1, limite: 2259.20, aliquota: 0, deducao: 0 },\n  { faixa: 2, limite: 3393.80, aliquota: 7.5, deducao: 169.44 },\n  { faixa: 3, limite: 4500.00, aliquota: 15, deducao: 381.44 },\n  { faixa: 4, limite: 5599.99, aliquota: 22.5, deducao: 662.77 },\n  { faixa: 5, limite: Infinity, aliquota: 27.5, deducao: 896.00 }\n];\nCarlos Alberto — 14:22\nEu ja tenho calculo\n| Campo                | Valor       |\n| -------------------- | ----------- |\n| Rendimentos      | R$ 100.000 |\n| Despesas Médicas | R$ 5.000   |\n| Educação         | R$ 3.500   |\n| Previdência      | R$ 7.000   |\n| IR Retido        | R$ 2.000   |\n| Dependentes      | 2           |\n--------------------------------------------------------------------\n| Campo                | Valor      |\n| -------------------- | ---------- |\n| Rendimentos      | R$ 60.000 |\n| Despesas Médicas | R$ 2.000  |\n| Educação         | R$ 1.000  |\n| Previdência      | R$ 5.000  |\n| IR Retido        | R$ 10.000 |\n| Dependentes      | 1          |\nQuando chegar do almoço me avisa por favor \nMuad'Dib — 14:26\nvoltando\nCarlos Alberto — 14:27\nopa\nMuad'Dib — 14:27\nvou ver aqui o path\nCarlos Alberto — 14:27\ncomo ta ai\nMuad'Dib — 14:29\nna primeira letra que digito dá isso\nImagem\nCarlos Alberto — 14:30\nentão.. acho que o setVar do codigo modelo ta com bug pra campos de texto.. vou te passar o codigo:\nMuad'Dib — 14:30\nblz\nCarlos Alberto — 14:30\nacha esse cara\nImagem\ne coloca esse codigo:\n// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\nExpandir\nmessage.txt\n5 KB\n﻿\n// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: green; background-color: black; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const css3 =\n  'color: yellow; background-color: red; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css4 =\n  'color: yellow; background-color: darkred; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops_setVar = { args: any; pass: { keyPath: string[]; value: any } };\n\nexport const setVar = (props: Tprops_setVar) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  let { keyPath, value } = pass;\n  console.log({ value });\n\n  // ---------- join String\n  const url = keyPath.reduce((prev, curr) => prev + curr, '');\n\n  const typeValue = testArgsVars(value);\n\n  // -------------------------------\n  // ------------- IF is FREE VALUE\n  // -------------------------------\n  if (typeValue === 'free') {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value[0]);\n\n    const isFunction = typeof value[0];\n    if (isFunction) {\n      return setData({ path: url, value: value[0](args) });\n    };\n\n    return setData({ path: url, value: value[0] });\n  }\n\n  // -----------------------------------\n  // ------------ IF is ARG or VAR VALUE\n  // -----------------------------------\n  value = getCondValue(typeValue, value, args);\n  // value = updatedValue;\n\n  // --------- DEPURAR ERRO\n  if (value === undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css3);\n    console.log('%csetVar path', css4, url);\n    console.log('%csetVar type', css4, typeValue);\n    console.log('%csetVar value', css4, 'o valor de value Ã© ' + value);\n  }\n\n  // --------- DEPURAR OK\n  if (value !== undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value);\n\n    return setData({ path: url, value: value });\n  }\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgsVars = (value: string[]) => {\n  let typeValue: 'free' | 'var' | 'arg' = 'free';\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  return typeValue;\n};\n\nconst getCondValue = (typeValue, value, args) => {\n  let updatedValue = undefined;\n  console.log({ value });\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  // --------------------------\n  // ------- Tratamento de ARGs\n  // --------------------------\n  if (typeValue === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    // ---- Para Callback Functions\n    // ---- Ex. onChangeText do TextInput\n    const condInput = key === 'callback';\n    if (condInput) {\n      updatedValue = args[0];\n    }\n\n    // ---- Para Listas\n    // ---- Passa todo objeto 'item'\n    const condFull = key === 'full';\n    if (condFull) {\n      updatedValue = findFlatItem(args);\n    }\n\n    // ---- Para Listas\n    // ---- Seleciona um campo dentro de 'item'\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      updatedValue = foundItem[key];\n    }\n\n    if (updatedValue === undefined) console.log('ARG ERROR', { updatedValue });\n  }\n\n  // --------------------------\n  // ------- Tratamento de VARs\n  // --------------------------\n  if (typeValue === 'var') {\n    console.log({ joinedChild });\n    const [condVar, varValue] = getVarValue(joinedChild, 'noComponent');\n    if (condVar) updatedValue = varValue;\n    if (!condVar) console.log('VAR ERROR', { updatedValue });\n  }\n\n  return updatedValue;\n};\nmessage.txt\n5 KB"}}