{"1748630996472":{"actionType":"saveAll","createdAt":"1748630996472","actionID":"1748630996472","userID":"#TEMP","path":"system.capsules.f550c7f4-e8ec-42c1-b9b8-dc96a17ba9c0.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: green; background-color: black; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const css3 =\n  'color: yellow; background-color: red; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css4 =\n  'color: yellow; background-color: darkred; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops_setVar = { args: any; pass: { keyPath: string[]; value: any } };\n\nexport const setVar = (props: Tprops_setVar) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  let { keyPath, value } = pass;\n  console.log({ value });\n\n  // ---------- join String\n  const url = keyPath.reduce((prev, curr) => prev + curr, '');\n\n  const typeValue = testArgsVars(value);\n\n  // -------------------------------\n  // ------------- IF is FREE VALUE\n  // -------------------------------\n  if (typeValue === 'free') {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value[0]);\n\n    return setData({ path: url, value: value[0] });\n  }\n\n  // -----------------------------------\n  // ------------ IF is ARG or VAR VALUE\n  // -----------------------------------\n  value = getCondValue(typeValue, value, args);\n  // value = updatedValue;\n\n  // --------- DEPURAR ERRO\n  if (value === undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css3);\n    console.log('%csetVar path', css4, url);\n    console.log('%csetVar type', css4, typeValue);\n    console.log('%csetVar value', css4, 'o valor de value Ã© ' + value);\n  }\n\n  // --------- DEPURAR OK\n  if (value !== undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value);\n\n    return setData({ path: url, value: value });\n  }\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgsVars = (value: string[]) => {\n  let typeValue: 'free' | 'var' | 'arg' = 'free';\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  return typeValue;\n};\n\nconst getCondValue = (typeValue, value, args) => {\n  let updatedValue = undefined;\n  console.log({ value });\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  // --------------------------\n  // ------- Tratamento de ARGs\n  // --------------------------\n  if (typeValue === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    // ---- Para Callback Functions\n    // ---- Ex. onChangeText do TextInput\n    const condInput = key === 'callback';\n    if (condInput) {\n      updatedValue = args[0];\n    }\n\n    // ---- Para Listas\n    // ---- Passa todo objeto 'item'\n    const condFull = key === 'full';\n    if (condFull) {\n      updatedValue = findFlatItem(args);\n    }\n\n    // ---- Para Listas\n    // ---- Seleciona um campo dentro de 'item'\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      updatedValue = foundItem[key];\n    }\n\n    if (updatedValue === undefined) console.log('ARG ERROR', { updatedValue });\n  }\n\n  // --------------------------\n  // ------- Tratamento de VARs\n  // --------------------------\n  if (typeValue === 'var') {\n    console.log({ joinedChild });\n    const [condVar, varValue] = getVarValue(joinedChild, 'noComponent');\n    if (condVar) updatedValue = varValue;\n    if (!condVar) console.log('VAR ERROR', { updatedValue });\n  }\n\n  return updatedValue;\n};\n","newValue":"// ---------- import Local Tools\nimport { setData, getVarValue } from '../project';\n\nexport const css1 =\n  'color: yellow; background-color: black; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css2 =\n  'color: green; background-color: black; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\nexport const css3 =\n  'color: yellow; background-color: red; font-size: 11px; padding: 2px 6px; border-radius: 3px';\nexport const css4 =\n  'color: yellow; background-color: darkred; font-size: 10px; padding: 2px 6px; border-radius: 3px';\n\ntype Tprops_setVar = { args: any; pass: { keyPath: string[]; value: any } };\n\nexport const setVar = (props: Tprops_setVar) => {\n  // ---------- set Caps Inputs\n  const { args, pass } = props;\n  let { keyPath, value } = pass;\n  console.log({ value });\n\n  // ---------- join String\n  const url = keyPath.reduce((prev, curr) => prev + curr, '');\n\n  const typeValue = testArgsVars(value);\n\n  // -------------------------------\n  // ------------- IF is FREE VALUE\n  // -------------------------------\n  if (typeValue === 'free') {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value[0]);\n\n    return setData({ path: url, value: value[0] });\n  }\n\n  // -----------------------------------\n  // ------------ IF is ARG or VAR VALUE\n  // -----------------------------------\n  value = getCondValue(typeValue, value, args);\n  // value = updatedValue;\n\n  // --------- DEPURAR ERRO\n  if (value === undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css3);\n    console.log('%csetVar path', css4, url);\n    console.log('%csetVar type', css4, typeValue);\n    console.log('%csetVar value', css4, 'o valor de value Ã© ' + value);\n  }\n\n  // --------- DEPURAR OK\n  if (value !== undefined) {\n    // --------- set Consoles System\n    console.log('%csetVar', css1);\n    console.log('path:', url);\n    console.log('type:', typeValue);\n    console.table('value:', value);\n\n    return setData({ path: url, value: value });\n  }\n};\n\nconst findFlatItem = obj => {\n  if (typeof obj !== 'object' || obj === null) return null;\n\n  if ('item' in obj) return obj.item;\n\n  for (const key in obj) {\n    if (Array.isArray(obj[key])) {\n      for (const element of obj[key]) {\n        const found = findFlatItem(element);\n        if (found) return found;\n      }\n    } else if (typeof obj[key] === 'object') {\n      const found = findFlatItem(obj[key]);\n      if (found) return found;\n    }\n  }\n\n  return null;\n};\n\nconst testArgsVars = (value: string[]) => {\n  let typeValue: 'free' | 'var' | 'arg' = 'free';\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  return typeValue;\n};\n\nconst getCondValue = (typeValue, value, args) => {\n  let updatedValue = undefined;\n  console.log({ value });\n\n  const joinedChild = value.join();\n  if (joinedChild.includes('$var_')) typeValue = 'var';\n  if (joinedChild.includes('$arg_')) typeValue = 'arg';\n\n  // --------------------------\n  // ------- Tratamento de ARGs\n  // --------------------------\n  if (typeValue === 'arg') {\n    const key = joinedChild.split('_')[1];\n\n    // ---- Para Callback Functions\n    // ---- Ex. onChangeText do TextInput\n    const condInput = key === 'callback';\n    if (condInput) {\n      updatedValue = args[0];\n    }\n\n    // ---- Para Listas\n    // ---- Passa todo objeto 'item'\n    const condFull = key === 'full';\n    if (condFull) {\n      updatedValue = findFlatItem(args);\n    }\n\n    // ---- Para Listas\n    // ---- Seleciona um campo dentro de 'item'\n    const foundItem = findFlatItem(args);\n    if (foundItem && foundItem[key]) {\n      updatedValue = foundItem[key];\n    }\n\n    if (updatedValue === undefined) console.log('ARG ERROR', { updatedValue });\n  }\n\n  // --------------------------\n  // ------- Tratamento de VARs\n  // --------------------------\n  if (typeValue === 'var') {\n    console.log({ joinedChild });\n    const [condVar, varValue] = getVarValue(joinedChild, 'noComponent');\n    if (condVar) updatedValue = varValue;\n    if (!condVar) console.log('VAR ERROR', { updatedValue });\n  }\n\n  return updatedValue;\n};"},"1748630996473":{"actionType":"saveAll","createdAt":"1748630996473","actionID":"1748630996473","userID":"#TEMP","path":"system.capsules.3a60a4b0-0190-416b-889b-1b646464730b.capsUseCodeInfo.capsUseInputs.sss_custom_caps-0.capsIptTxtValue","oldValue":"() => {\n  const path1 = \"all.forms.form1\";\n  const path2 = \"sc.A1.results\";\n  const allVal = tools.getCtData(path1);\n\n  const { rendTrib, desMed, irRet, edu, prev, dep } = allVal;\nconsole.log({irRet});\n\n  const toNum = (str) => parseFloat((str || \"0\").replace(\",\", \".\"));\n\n  const totalDep = toNum(dep) * 2400;\n  const totalDed = toNum(desMed) + toNum(edu) + toNum(prev) + totalDep;\n  const calcBase = Math.max(0, toNum(rendTrib) - totalDed);\n\n  const tabelaIR = tools.getCtData('all.tabelaIR');\n  const faixaEncontrada = tabelaIR.find(faixa => calcBase <= faixa.limite);\n\nconst irDevido = Math.max(0, (calcBase * (faixaEncontrada.aliquota / 100)) - faixaEncontrada.deducao);\n\nconst resultado = toNum(irRet) - irDevido;\n\nlet finalResult;\nif (resultado >= 0) {\nconst res1 = \"Restituição: R$\" + resultado.toFixed(2);\n  console.log( res1 );\nfinalResult = res1;\n} else {\n  const res2 = \"Imposto a pagar: R$\" +  Math.abs(resultado).toFixed(2);\n  console.log( res2 );\nfinalResult = res2;\n}\nconsole.log({finalResult});\n\n const pass1 = { keyPath: [path2], value: [finalResult] };\n tools.functions.setVar({ args: '', pass: pass1 });\n\ntools.functions.goTo('scResultados');\n}","newValue":"() => {\n  const path1 = \"all.forms.form1\";\n  const path2 = \"sc.A1.results\";\n  const allVal = tools.getCtData(path1);\n\n  const { rendTrib, desMed, irRet, edu, prev, dep } = allVal;\nconsole.log({irRet});\n\n  const toNum = (str) => parseFloat((str || \"0\").replace(\",\", \".\"));\n\n  const totalDep = toNum(dep) * 2400;\n  const totalDed = toNum(desMed) + toNum(edu) + toNum(prev) + totalDep;\n  const calcBase = Math.max(0, toNum(rendTrib) - totalDed);\n\n  const tabelaIR = tools.getCtData('all.tabelaIR');\n  const faixaEncontrada = tabelaIR.find(faixa => calcBase <= faixa.limite);\n\nconst irDevido = Math.max(0, (calcBase * (faixaEncontrada.aliquota / 100)) - faixaEncontrada.deducao);\n\nconst resultado = toNum(irRet) - irDevido;\n\nlet finalResult;\nif (resultado >= 0) {\nconst res1 = \"Restituição: R$\" + resultado.toFixed(2);\n  console.log( res1 );\nfinalResult = res1;\n} else {\n  const res2 = \"Imposto a pagar: R$\" +  Math.abs(resultado).toFixed(2);\n  console.log( res2 );\nfinalResult = res2;\n}\nconsole.log({finalResult});\n\n const pass1 = { keyPath: [path2], value: [finalResult] };\n tools.functions.setVar({ args: '', pass: pass1 });\n\ntools.goTo('scResultados');\n}"}}